
ws1s;

pred close(var1 x, var1 y, var2 M) =
	x<y & (~ex1 z: (z in M & x<z & z<y)) ;

pred before(var1 nil, var1 x, var1 y) =
	x<y & y<nil ;

pred before1(var1 end, var1 c, var1 cn, var1 x, var1 y) =
	(x<y & y<c) | (x<c & c<=y & y~=cn & y<end) | (x=cn & y=c) | (x=cn & cn<y & y<end) | (x=c & cn<y & y<end) | (cn<x & x<y & y<end) ;

pred validmodel(var1 end, var1 c, var1 cn, var1 p, var1 cn1, var1 p1, var1 t, var1 head, var1 head1, var1 exdv1, var1 exdv2) =
	0<end &
	c<=end & cn<=end & p<=end & cn1<=end & p1<=end & t<=end & head<=end & head1<=end & exdv1<=end & exdv2<=end ;

pred validcomputation(var1 c, var1 cn, var1 p, var1 cn1, var1 p1, var1 t, var1 head, var1 head1, var0 change, var0 change1) = t=cn+1 & change1 & head1=cn & p1=cn & cn1=t ;

pred validmodel'(var1 end, var2 M) = 
	end in M & (ex1 s where s in M : s < end) ;

pred minimalmodel(var1 end, var1 c, var1 cn, var1 p, var1 cn1, var1 p1, var1 t, var1 head, var1 head1, var1 exdv1, var1 exdv2) =
	~ex2 M :(
		(all1 s where s in M : s <= end) & 
		(ex1 s : s <= end & s notin M) &
		c in M & cn in M & p in M & cn1 in M & p1 in M & t in M & head in M & head1 in M & exdv1 in M & exdv2 in M &
		validmodel'(end,M) &
		(cn+1=t => close(cn,t,M)) &
		(c+1=cn => close(c,cn,M)) &
		(p+1=c => close(p,c,M)) &
		(close(c,cn1,M) => c+1=cn1) &
		(close(p1,c,M) => p1+1=c)
	 );

var1 end;

ex1 c,cn,p,cn1,p1,t,head,head1,exdv1,exdv2 : (
	validmodel(end,c,cn,p,cn1,p1,t,head,head1,exdv1,exdv2) & minimalmodel(end,c,cn,p,cn1,p1,t,head,head1,exdv1,exdv2) ) ;

